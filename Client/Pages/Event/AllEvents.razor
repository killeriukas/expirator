@using Shared.Dtos
@inject HttpClient http

 <div class="row">
     <div class="col">
         @if(eventViews == null) {
             <p>Pending for data results...</p>
         } else {
             <div class="modal fade" id="deleteEventModal" tabindex="-1">
                 <div class="modal-dialog modal-dialog-centered">
                     <div class="modal-content">
                         <div class="modal-header">
                             <h5 class="modal-title">Warning</h5>
                             <button type="button" class="close" data-dismiss="modal">
                                 <span>&times;</span>
                             </button>
                         </div>
                         <div class="modal-body">
                             Are you sure you want to delete <span class="font-weight-bold">@currentlySelected.Name</span>? This cannot be undone.
                         </div>
                         <div class="modal-footer">
                             <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                             <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => OnDeleteConfirmClicked(currentlySelected)">Delete</button>
                         </div>
                     </div>
                 </div>
             </div>

             <ul class="list-group list-group-flush">
                 <li class="list-group-item">
                     <div class="row font-weight-bold">
                         <div class="col-4">Name</div>
                         <div class="col-2">Start Time</div>
                         <div class="col-2">Expiration Time</div>
                         <div class="col-4">Due</div>
                     </div>
                 </li>
                 @foreach(var data in eventViews) {
                     <li class="list-group-item @GetBackgroundColor(data) text-white mb-1">
                         <div class="row align-items-center">
                             <div class="col-4">@data.Name</div>
                             <div class="col-2">@data.StartTime.ToShortDateString()</div>
                             <div class="col-2">@data.ExpirationTime.ToShortDateString()</div>
                             <div class="col-4">
                                 <div class="row align-items-center">
                                     <div class="col-6">
                                         <span>@data.GetDueDays() Days</span>
                                     </div>
                                     <div class="col-6">
                                         <a class="btn btn-sm btn-light" href="/eventdata/edit/@data.Id">Edit</a>
                                         <button class="btn btn-sm btn-light" data-toggle="modal" data-target="#deleteEventModal" @onclick="() => OnDeleteClicked(data)">Delete</button>
                                     </div>
                                 </div>
                             </div>
                         </div>
                     </li>
                 }
             </ul>
         }
     </div>
</div>

@code {

    private EventDataReadDto currentlySelected = new EventDataReadDto();

    private void OnDeleteClicked(EventDataReadDto item) {
        currentlySelected = item;
    }

    private async void OnDeleteConfirmClicked(EventDataReadDto item) {
        await http.DeleteAsync($"api/eventdata/{item.Id}");
        eventViews.Remove(item);
        currentlySelected = new EventDataReadDto();
        StateHasChanged();
    }







    private List<EventDataReadDto> eventViews = null;

    public string GetBackgroundColor(EventDataReadDto data) {
        return GetBackgroundColor(data.GetDueDays());
    }

    private string GetBackgroundColor(int days) {
        if(days > 30) {
            return "bg-success";
        } else if(days > 7) {
            return "bg-warning";
        } else {
            return "bg-danger";
        }
    }

    protected override async Task OnInitializedAsync() {
        eventViews = await http.GetFromJsonAsync<List<EventDataReadDto>>("api/eventdata");

        eventViews = eventViews.OrderBy(x => x.ExpirationTime).ToList();
    }

}