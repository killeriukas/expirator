@using Shared.Dtos
@inject HttpClient http

 <div class="row">
     <div class="col">
         @if(eventViews == null) {
             <p>Pending for event data results...</p>
         } else {
             <ul class="list-group list-group-flush">
                 <li class="list-group-item">
                     <div class="row font-weight-bold">
                         <div class="col-4">Name</div>
                         <div class="col-2">Start Time</div>
                         <div class="col-2">Expiration Time</div>
                         <div class="col-4">Due</div>
                     </div>
                 </li>
                 @foreach(var data in eventViews) {
                     <li class="list-group-item @GetBackgroundColor(data) text-white mb-1">
                         <div class="row align-items-center">
                             <div class="col-4">@data.Name</div>
                             <div class="col-2">@data.StartTime.ToShortDateString()</div>
                             <div class="col-2">@data.ExpirationTime.ToShortDateString()</div>
                             <div class="col-4">
                                 <div class="row align-items-center">
                                     <div class="col-6">
                                         <span>@data.GetDueDays() Days</span>
                                     </div>
                                     <div class="col-6">
                                         <a class="btn btn-sm btn-light" href="/eventdata/edit/@data.Id">Edit</a>
                                     </div>
                                 </div>
                             </div>
                         </div>
                     </li>
                 }
             </ul>
         }
     </div>
</div>

@code {

    private List<EventDataReadDto> eventViews = null;

    public string GetBackgroundColor(EventDataReadDto data) {
        return GetBackgroundColor(data.GetDueDays());
    }

    private string GetBackgroundColor(int days) {
        if(days > 30) {
            return "bg-success";
        } else if(days > 7) {
            return "bg-warning";
        } else {
            return "bg-danger";
        }
    }

    protected override async Task OnInitializedAsync() {
        eventViews = await http.GetFromJsonAsync<List<EventDataReadDto>>("api/eventdata");

        eventViews = eventViews.OrderBy(x => x.ExpirationTime).ToList();
    }

}